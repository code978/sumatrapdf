from extract_strings import load_strings_file, strings_file, get_lang_list

### file templates ###

TRANSLATIONS_TXT_H = """\
#ifndef TRANSLATIONS_TXT_H__
#define TRANSLATIONS_TXT_H__

#ifdef __cplusplus
extern "C"
{
#endif

extern int g_transLangsCount;
extern const char *g_transLangs[];
extern int g_transTranslationsCount;
extern const char *g_transTranslations[];

#ifdef __cplusplus
}
#endif

#endif
"""

TRANSLATIONS_TXT_C = """\
/* Generated by script gen_c_from_strings_file.py
   DO NOT EDIT MANUALLY */
#ifndef NULL
#define NULL 0
#endif

#ifdef __cplusplus
extern "C"
{
#endif

int g_transLangsCount = %(langs_count)d;

const char *g_transLangs[] = {
  %(langs_c)s
};

int g_transTranslationsCount = %(translations_count)d;

const char *g_transTranslations[] = {
%(translations)s
};

#ifdef __cplusplus
}
#endif

"""

LANG_MENU_DEF_H = """
/* Generated by script gen_c_from_strings_file.py
    DO NOT EDIT MANUALLY */

#ifndef LANG_MENU_DEF_H__
#define LANG_MENU_DEF_H__

#define LANGS_COUNT %(langs_count)d


typedef struct MenuDef {
    const char *m_title;
    int         m_id;
    int         m_flags;
} MenuDef;

typedef struct LangDef {
    const char* _langName;
    int         _langId;
} LangDef;

extern LangDef g_langs[LANGS_COUNT];
extern MenuDef g_menuDefLang[LANGS_COUNT];

#endif
"""

LANG_MENU_DEF_C = """
/* Generated by script gen_c_from_strings_file.py
   DO NOT EDIT MANUALLY */

#include "Resource.h"
#include "LangMenuDef.h"

LangDef g_langs[LANGS_COUNT] = {
    %(lang_codes)s
};

MenuDef g_menuDefLang[LANGS_COUNT] = {
    %(lang_names)s
};
"""

### end of file templates ###

# TODO: stupid C escaping fails on e.g. \xcbb
def c_hex(c):
    return r'\x' + hex(ord(c))[2:].upper()

def c_oct(c):
    o = "0" + oct(ord(c))
    return "\\" + o[-3:]

def c_escape(txt):
    if txt is None:
        return "NULL"
    a = []
    for c in txt:
        c = c.encode("utf-8")
        if c == '"':
            a.append(r'\"')
        elif len(c) == 1:
            a.append(c)
        else:
            a += [c_oct(c2) for c2 in c]
    return '"%s"' % "".join(a)

def get_trans_for_lang(strings_dict, keys, lang_arg):
    trans = []
    for k in keys:
        vals = strings_dict[k]
        txt = None
        for v in vals:
            (lang, tr) = v
            if lang_arg == lang:
                txt = tr
        trans.append(txt)
    return trans

def gen_h_code(strings_dict, file_name):
    file_content = TRANSLATIONS_TXT_H % locals()
    file(file_name, "wb").write(file_content)

def gen_c_code(strings_dict, file_name):
    default_lang = "en"
    langs = get_lang_list(strings_dict)
    assert default_lang not in langs
    langs = [default_lang] + langs
    langs_count = len(langs)
    translations_count = len(strings_dict)
    langs_c = [c_escape(tmp) for tmp in langs]
    langs_c = ", ".join(langs_c)
    
    keys = strings_dict.keys()
    keys.sort()
    lines = []
    for lang in langs:
        if "en" == lang:
            trans = keys
        else:
            trans = get_trans_for_lang(strings_dict, keys, lang)
        lines.append("")
        lines.append("  /* Translations for language %s */" % lang)
        lines += ["  %s," % c_escape(t) for t in trans]
    translations = "\n".join(lines)
    
    file_content = TRANSLATIONS_TXT_C % locals()
    file(file_name, "wb").write(file_content)

def to_idm(iso): return "IDM_LANG_" + iso.upper().replace("-", "_")

def lang_sort_func(x,y):
    # special case: english is first
    if x[0] == "en": return -1
    if y[0] == "en": return 1
    return cmp(x[1], y[1])

def gen_lang_menu_def_h(langs, file_name):
    langs_count = len(langs)
    file_content = LANG_MENU_DEF_H % locals()
    file(file_name, "wb").write(file_content)

def gen_lang_menu_def_c(langs, file_name):
    langs.sort(lang_sort_func)
    lang_codes = ['{"%s", %s},' % (lang[0], to_idm(lang[0])) for lang in langs]
    lang_codes = "\n    ".join(lang_codes)
    
    lang_names = ['{ %s, %s },' % (c_escape(lang[1]), to_idm(lang[0])) for lang in langs]
    lang_names = "\n    ".join(lang_names)
    
    file_content = LANG_MENU_DEF_C % locals()
    file(file_name, "wb").write(file_content)

def gen_code(strings_dict, langs, h_file_name, c_file_name):
    gen_h_code(strings_dict, h_file_name)
    gen_c_code(strings_dict, c_file_name)
    gen_lang_menu_def_c(langs, "LangMenuDef.cpp")
    gen_lang_menu_def_h(langs, "LangMenuDef.h")

def main():
    (strings_dict, langs) = load_strings_file(strings_file)
    h_file_name = "translations_txt.h"
    c_file_name = "translations_txt.c"
    gen_code(strings_dict, langs, h_file_name, c_file_name)

if __name__ == "__main__":
    main()

