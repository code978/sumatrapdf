/* Copyright 2013 the SumatraPDF project authors (see AUTHORS file).
   License: GPLv3 (see COPYING) */

// This file is auto-generated by gen_appprefs2.py

#ifndef AppPrefs2_h
#define AppPrefs2_h

class AdvancedSettings {
public:

    /* ***** fields for section AdvancedOptions ***** */

    // whether the UI used for PDF documents will be used for ebooks as
    // well (enables printing and searching, disables automatic reflow)
    bool traditionalEbookUI;
    // whether opening a new document should happen in an already running
    // SumatraPDF instance so that there's only one process and documents
    // aren't opend twice
    bool reuseInstance;
    // background color of the non-document windows, traditionally yellow
    COLORREF mainWindowBackground;
    // whether the Esc key will exit SumatraPDF same as 'q'
    bool escToExit;
    // color value with which black (text) will be substituted
    COLORREF textColor;
    // color value with which white (background) will be substituted
    COLORREF pageColor;

    /* ***** fields for section PrinterDefaults ***** */

    // default value for scaling (shrink, fit, none or NULL)
    ScopedMem<WCHAR> printScale;
    // default value for the compatibility option
    bool printAsImage;

    /* ***** fields for section PagePadding ***** */

    // size of the left/right margin between window and document
    int outerX;
    // size of the top/bottom margin between window and document
    int outerY;
    // size of the horizontal margin between two pages
    int innerX;
    // size of the vertical margin between two pages
    int innerY;

    /* ***** fields for section ForwardSearch ***** */

    // whether the inverse search command line setting is visible in the
    // Settings dialog
    bool enableTeXEnhancements;
    // when set to a positive value, the forward search highlight style
    // will be changed to a rectangle at the left of the page (with the
    // indicated amount of margin from the page margin)
    int highlightOffset;
    // the width of the highlight rectangle for when HighlightOffset is set
    int highlightWidth;
    // the color used for the forward search highlight
    COLORREF highlightColor;
    // whether the forward search highlight will remain visible until the
    // next mouse click instead of fading away instantly
    bool highlightPermanent;

    /* ***** fields for array section ExternalViewer ***** */

    // command line with which to call the external viewer, may contain %p
    // for page numer and %1 for the file name
    WStrVec vecCommandLine;
    // name of the external viewer to be shown in the menu (implied by
    // CommandLine if missing)
    WStrVec vecName;
    // filter for which file types the menu item is to be shown (e.g.
    // "*.pdf;*.xps"; "*" if missing)
    WStrVec vecFilter;

    AdvancedSettings() : traditionalEbookUI(false), reuseInstance(false), mainWindowBackground(0xFFF200), escToExit(false), textColor(0x000000), pageColor(0xFFFFFF), printAsImage(false), outerX(4), outerY(2), innerX(4), innerY(4), enableTeXEnhancements(false), highlightOffset(0), highlightWidth(15), highlightColor(0x6581FF), highlightPermanent(false) { }
};

#ifdef INCLUDE_APPPREFS2_METADATA
enum SettingType { SType_Section, SType_SectionVec, SType_Bool, SType_Color, SType_Int, SType_String };

struct SettingInfo {
    const char *name;
    SettingType type;
    size_t offset;
};

static SettingInfo gAdvancedSettingsInfo[] = {
    /* ***** fields for section AdvancedOptions ***** */
    { "AdvancedOptions", SType_Section },
    { "TraditionalEbookUI", SType_Bool, offsetof(AdvancedSettings, traditionalEbookUI) },
    { "ReuseInstance", SType_Bool, offsetof(AdvancedSettings, reuseInstance) },
    { "MainWindowBackground", SType_Color, offsetof(AdvancedSettings, mainWindowBackground) },
    { "EscToExit", SType_Bool, offsetof(AdvancedSettings, escToExit) },
    { "TextColor", SType_Color, offsetof(AdvancedSettings, textColor) },
    { "PageColor", SType_Color, offsetof(AdvancedSettings, pageColor) },
    /* ***** fields for section PrinterDefaults ***** */
    { "PrinterDefaults", SType_Section },
    { "PrintScale", SType_String, offsetof(AdvancedSettings, printScale) },
    { "PrintAsImage", SType_Bool, offsetof(AdvancedSettings, printAsImage) },
    /* ***** fields for section PagePadding ***** */
    { "PagePadding", SType_Section },
    { "OuterX", SType_Int, offsetof(AdvancedSettings, outerX) },
    { "OuterY", SType_Int, offsetof(AdvancedSettings, outerY) },
    { "InnerX", SType_Int, offsetof(AdvancedSettings, innerX) },
    { "InnerY", SType_Int, offsetof(AdvancedSettings, innerY) },
    /* ***** fields for section ForwardSearch ***** */
    { "ForwardSearch", SType_Section },
    { "EnableTeXEnhancements", SType_Bool, offsetof(AdvancedSettings, enableTeXEnhancements) },
    { "HighlightOffset", SType_Int, offsetof(AdvancedSettings, highlightOffset) },
    { "HighlightWidth", SType_Int, offsetof(AdvancedSettings, highlightWidth) },
    { "HighlightColor", SType_Color, offsetof(AdvancedSettings, highlightColor) },
    { "HighlightPermanent", SType_Bool, offsetof(AdvancedSettings, highlightPermanent) },
    /* ***** fields for array section ExternalViewer ***** */
    { "ExternalViewer", SType_SectionVec },
    { "CommandLine", SType_String, offsetof(AdvancedSettings, vecCommandLine) },
    { "Name", SType_String, offsetof(AdvancedSettings, vecName) },
    { "Filter", SType_String, offsetof(AdvancedSettings, vecFilter) },
};
#endif

#endif
