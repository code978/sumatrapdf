# Thoughts on implementing ebook support.

There are quite a few ebook formats: mobi, epub, fb2, plucker, oeb etc.
It's best to start with just one, mobi being the best candidate (it's
the format used by Kindle).

The most important part is the quality of text rendering. Kindle for PC
does it best, FBReader does it well, CoolReader is bad.

Another important part is the UI. I will try to replicate Kindle's UI as
it's the best out of those that I tried. It's simple, elegant and provides
all the necessary features.

In order to not be bogged down by current Sumatra design, I'll start it
as a new, test app. I want to experiment with UI a bit.

There are 3 important parts:
* prototyping the UI effects
* parsing mobi file format
* text formatting and display (can be prototyped on text files as mobi
  is mostly text with few formatting capabilities and occasional images).

Those part are mostly independent and can be worked on in parallel.

Existing code to looked at:
* https://github.com/geometer/FBReader
* https://github.com/Prezu/MobiReader
* https://github.com/thijs/iliad-hacking
* CoolReader

I'm tempted to experiment with skia for UI rendering. Recreating some
of the Kindle effects requires composited 2d rendering with partial
transparency. Gdi+ does some of this stuff but I believe skia has more
built-in functionality (that I would otherwise have to implement with
Gdi+).

# Brainstorming on how to do text layout

Book is rendered into pages. A page is a rectangle on the screen.
Layout process determines position and bounding box of text runs and
other elements on the page.

We need to re-layout every time the size of a page changes or when user
changes the size of default font. Kindle does reformating in real time
and so should we.
