diff -rPu5 jbig2dec.orig\jbig2_halftone.c jbig2dec\jbig2_halftone.c
--- jbig2dec.orig\jbig2_halftone.c	Tue Jan 24 19:09:05 2012
+++ jbig2dec\jbig2_halftone.c	Tue Jan 24 19:20:14 2012
@@ -140,11 +140,11 @@
   /* fill out the generic region decoder parameters */
   rparams.MMR = params->HDMMR;
   rparams.GBTEMPLATE = params->HDTEMPLATE;
   rparams.TPGDON = 0;	/* not used if HDMMR = 1 */
   rparams.USESKIP = 0;
-  rparams.gbat[0] = -params->HDPW;
+  rparams.gbat[0] = -(int)params->HDPW;
   rparams.gbat[1] = 0;
   rparams.gbat[2] = -3;
   rparams.gbat[3] = -1;
   rparams.gbat[4] = 2;
   rparams.gbat[5] = -2;
diff -rPu5 jbig2dec.orig\jbig2_huffman.c jbig2dec\jbig2_huffman.c
--- jbig2dec.orig\jbig2_huffman.c	Tue Jan 24 19:09:05 2012
+++ jbig2dec\jbig2_huffman.c	Fri Jan 27 22:30:00 2012
@@ -251,10 +251,17 @@
       int PREFLEN;
 
       entry = &table->entries[this_word >> (32 - log_table_size)];
       flags = entry->flags;
       PREFLEN = entry->PREFLEN;
+      /* SumatraPDF: handle missing JBIG2Globals */
+      if (entry->u.RANGELOW == -1 && PREFLEN == (byte)-1 && flags == (byte)-1)
+	{
+	  if (oob)
+	    *oob = -1;
+	  return -1;
+	}
 
       next_word = hs->next_word;
       offset_bits += PREFLEN;
       if (offset_bits >= 32)
 	{
@@ -385,10 +392,12 @@
     jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1,
         "couldn't allocate entries storage in jbig2_build_huffman_table");
     return NULL;
   }
   result->entries = entries;
+  /* SumatraPDF: handle missing JBIG2Globals */
+  memset(entries, 0xFF, sizeof(Jbig2HuffmanEntry) * max_j);
 
   LENCOUNT[0] = 0;
 
   for (CURLEN = 1; CURLEN <= LENMAX; CURLEN++)
     {
diff -rPu5 jbig2dec.orig\jbig2_image.c jbig2dec\jbig2_image.c
--- jbig2dec.orig\jbig2_image.c	Tue Jan 24 19:09:05 2012
+++ jbig2dec\jbig2_image.c	Fri Jan 27 22:29:01 2012
@@ -39,11 +39,12 @@
             "could not allocate image structure in jbig2_image_new");
 		return NULL;
 	}
 
 	stride = ((width - 1) >> 3) + 1; /* generate a byte-aligned stride */
-	image->data = jbig2_new(ctx, uint8_t, stride*height);
+	/* cf. http://code.google.com/p/sumatrapdf/issues/detail?id=1759 */
+	image->data = jbig2_new(ctx, uint8_t, stride*height + 1);
 	if (image->data == NULL) {
         jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1,
             "could not allocate image data buffer! [%d bytes]\n", stride*height);
 		jbig2_free(ctx->allocator, image);
 		return NULL;
@@ -223,10 +224,13 @@
     rightbyte = (x + w - 1) >> 3;
     shift = x & 7;
 
     /* general OR case */
     s = ss;
+    /* SumatraPDF: prevent heap overflow */
+    if (leftbyte > dst->height * dst->stride)
+      return -1;
     d = dd = dst->data + y*dst->stride + leftbyte;
     if (leftbyte == rightbyte) {
 	mask = 0x100 - (0x100 >> w);
         for (j = 0; j < h; j++) {
             *d |= (*s & mask) >> shift;
